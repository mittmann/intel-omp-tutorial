# -*- org-export-babel-evaluate: nil -*-
#+TITLE: intel tests
#+AUTHOR: Arthur Krause
#+LATEX_HEADER: \usepackage[margin=2cm,a4paper]{geometry}
#+STARTUP: overview indent
#+TAGS: Arthur(A) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)


* DoE
#+begin_src R :results output :session *R* :exports both
require(DoE.base);
  expDesign <- fac.design (
           nfactors=2,
           replications=10,
           repeat.only=FALSE,
           randomize=TRUE,
           seed=10373,
           nlevels=c(5, 3),
           factor.names=list(
	         test=c("seq", "seq-simd", "seq-inverted-simd", "seq-inverted-simd-aligned", "parallel-inverted-simd-aligned"),
               size=c(1000, 2000, 4000)));               
  export.design(expDesign,
                path=".",
                filename=NULL,
                type="csv",
                replace=TRUE,
                response.names=c("time"));
#+end_src

#+RESULTS:
:  creating full factorial with 15 runs ...

* script
#+begin_src sh :results output :exports both :tangle exp.sh
#!/bin/bash

while IFS="," read f1 f2 f3 f4 f5 f6 f7 f8
do
        if [ "$f1" != "\"name\"" ]; then #if its not the first line
                  TEST=${f5//\"/}
                  SIZE=${f6//\"/}
                  TIME=$(./intel-workshop/icc-avx/matrix-mult/src/$TEST\.exec $SIZE | grep time | awk '{print $2}')
                  else
                        TIME=0
                  fi
                  echo "$f1,$f2,$f3,$f4,$f5,$f6,$f7,$TIME"
        else
              #if its the first line just repeat it
              echo "$f1,$f2,$f3,$f4,$f5,$f6,$f7,$f8"
        fi
done < expDesign.csv > output.csv

#+end_src
* plot

** todos
#+begin_src R :results output graphics :file tempos.png :exports both :width 1200 :height 500 :session *Rs*
library(dplyr);
library(ggplot2); 

df <- read.csv("./output.csv");

k <- df %>% select(test,size,time) %>% 
 	      arrange(test,size,time)  %>% 
    	      group_by(test,size) %>%
	      summarize(N=n(), mean_time=mean(time),  se_time=3*sd(time)/sqrt(n())) %>%
 as.data.frame();

#k <- k[k$size==2000,]

k$test <- factor(k$test, levels=c("seq", "seq-simd", "seq-inverted-simd", "seq-inverted-simd-aligned", "parallel-inverted-simd-aligned"))
ggplot(k, aes(x=as.factor(test), y=mean_time))+

  geom_bar(stat="identity", position=position_dodge(), width=0.90, aes(fill=test)) + 

 scale_fill_manual(breaks=c("seq", "seq-simd", "seq-inverted-simd", "seq-inverted-simd-aligned", "parallel-inverted-simd-aligned"), 
values=c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2")) +

  theme_bw() + xlab("Otimização") + ylab("Tempo de Execução (segundos)")  +



  facet_wrap(~size, scale="free");


#+end_src

#+RESULTS:
[[file:tempos.png]]

** primeiro
#+begin_src R :results output graphics :file tempos1.png :exports both :width 600 :height 300 :session *Rs*
library(dplyr);
library(ggplot2); 

df <- read.csv("./output.csv");

k <- df %>% select(test,size,time) %>% 
 	      arrange(test,size,time)  %>% 
    	      group_by(test,size) %>%
	      summarize(N=n(), mean_time=mean(time),  se_time=3*sd(time)/sqrt(n())) %>%
 as.data.frame();

k <- k[k$size==4000,]
k <- k[k$test=="seq" | k$test=="seq-simd",]
k$diff <- round((1 / (k$mean_time / k[k$test=="seq",]$mean_time)), 3);
k$test <- factor(k$test, levels=c("seq", "seq-simd"))
ggplot(k, aes(x=as.factor(test), y=mean_time))+

  geom_bar(stat="identity", position=position_dodge(), width=0.90, aes(fill=test)) + 
 geom_text(aes(label=paste(diff, "x")), vjust=-0.3) +

 scale_fill_manual(breaks=c("seq", "seq-simd"), 
values=c("#E69F00", "#56B4E9")) +

  theme_bw() + xlab("Otimização") + ylab("Tempo de Execução (segundos)")  +

theme (axis.text.x=element_blank(),
axis.title.x=element_blank(),
        axis.ticks.x=element_blank()) ;



#+end_src

#+RESULTS:
[[file:tempos1.png]]

** segundo
#+begin_src R :results output graphics :file tempos2.png :exports both :width 600 :height 300 :session *Rs*
library(dplyr);
library(ggplot2); 

df <- read.csv("./output.csv");

k <- df %>% select(test,size,time) %>% 
 	      arrange(test,size,time)  %>% 
    	      group_by(test,size) %>%
	      summarize(N=n(), mean_time=mean(time),  se_time=3*sd(time)/sqrt(n())) %>%
 as.data.frame();

k <- k[k$size==4000,]
k <- k[k$test=="seq" | k$test=="seq-simd" | k$test=="seq-inverted-simd",]
k$diff <- round((1 / (k$mean_time / k[k$test=="seq",]$mean_time)), 3);
k$test <- factor(k$test, levels=c("seq", "seq-simd", "seq-inverted-simd"))
ggplot(k, aes(x=as.factor(test), y=mean_time))+

  geom_bar(stat="identity", position=position_dodge(), width=0.90, aes(fill=test)) + 
 geom_text(aes(label=paste(diff, "x")), vjust=-0.3) +

 scale_fill_manual(breaks=c("seq", "seq-simd", "seq-inverted-simd"), 
values=c("#E69F00", "#56B4E9", "#009E73")) +

  theme_bw() + xlab("Otimização") + ylab("Tempo de Execução (segundos)")  +
theme (axis.text.x=element_blank(),
axis.title.x=element_blank(),
        axis.ticks.x=element_blank()) ;



#+end_src

#+RESULTS:
[[file:tempos2.png]]

** terceiro
#+begin_src R :results output graphics :file tempos3.png :exports both :width 600 :height 300 :session *Rs*
library(dplyr);
library(ggplot2); 

df <- read.csv("./output.csv");

k <- df %>% select(test,size,time) %>% 
 	      arrange(test,size,time)  %>% 
    	      group_by(test,size) %>%
	      summarize(N=n(), mean_time=mean(time),  se_time=3*sd(time)/sqrt(n())) %>%
 as.data.frame();

k <- k[k$size==4000,]
k <- k[k$test=="seq" | k$test=="seq-simd" | k$test=="seq-inverted-simd" | k$test=="parallel-inverted-simd-aligned",]
k$diff <- round((1 / (k$mean_time / k[k$test=="seq",]$mean_time)), 3);
k$test <- factor(k$test, levels=c("seq", "seq-simd", "seq-inverted-simd", "parallel-inverted-simd-aligned"))
ggplot(k, aes(x=as.factor(test), y=mean_time))+

  geom_bar(stat="identity", position=position_dodge(), width=0.90, aes(fill=test)) + 
 geom_text(aes(label=paste(diff, "x")), vjust=-0.3) +
 scale_fill_manual(breaks=c("seq", "seq-simd", "seq-inverted-simd", "parallel-inverted-simd-aligned"), 
values=c("#E69F00", "#56B4E9", "#009E73", "#F0E442")) +

  theme_bw() + xlab("Otimização") + ylab("Tempo de Execução (segundos)")  +

theme (axis.text.x=element_blank(),
axis.title.x=element_blank(),
        axis.ticks.x=element_blank()) ;

#+end_src

#+RESULTS:
[[file:tempos3.png]]

** phi
#+begin_src R :results output graphics :file tempos4.png :exports both :width 600 :height 300 :session *Rs*
library(dplyr);
library(ggplot2); 

df <- read.csv("./output2.csv");

k <- df %>% select(test,size,time) %>% 
 	      arrange(test,size,time)  %>% 
    	      group_by(test,size) %>%
	      summarize(N=n(), mean_time=mean(time),  se_time=3*sd(time)/sqrt(n())) %>%
 as.data.frame();

k <- k[k$size==4000,]
k <- k[k$test=="seq" | k$test=="seq-simd" | k$test=="seq-inverted-simd" | k$test=="parallel-inverted-simd-aligned" | k$test=="xeon-phi",]
k$diff <- round((1 / (k$mean_time / k[k$test=="seq",]$mean_time)), 3);
k$test <- factor(k$test, levels=c("seq", "seq-simd", "seq-inverted-simd", "parallel-inverted-simd-aligned", "xeon-phi"))
ggplot(k, aes(x=as.factor(test), y=mean_time))+

  geom_bar(stat="identity", position=position_dodge(), width=0.90, aes(fill=test)) + 
 geom_text(aes(label=paste(diff, "x")), vjust=-0.3) +
 scale_fill_manual(breaks=c("seq", "seq-simd", "seq-inverted-simd", "parallel-inverted-simd-aligned", "xeon-phi"), 
values=c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2")) +

  theme_bw() + xlab("Otimização") + ylab("Tempo de Execução (segundos)")  +

theme (axis.text.x=element_blank(),
axis.title.x=element_blank(),
        axis.ticks.x=element_blank()) ;

#+end_src

#+RESULTS:
[[file:tempos4.png]]

* DoE Vtune
#+begin_src R :results output :session *vtune* :exports both
require(DoE.base);
  cacheDesign <- fac.design (
           nfactors=2,
           replications=10,
           repeat.only=FALSE,
           randomize=TRUE,
           seed=10373,
           nlevels=c(5, 3),
           factor.names=list(
	         test=c("seq", "seq-simd", "seq-inverted-simd", "seq-inverted-simd-aligned", "parallel-inverted-simd-aligned"),
               size=c(1000, 2000, 4000)));               
  export.design(cacheDesign,
                path=".",
                filename=NULL,
                type="csv",
                replace=TRUE,
                response.names=c("L1_hit", "L1_load"));
#+end_src

#+RESULTS:
:  creating full factorial with 15 runs ...

